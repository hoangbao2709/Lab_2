
Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08002304  08002304  00012304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800242c  0800242c  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800242c  0800242c  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800242c  0800242c  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800242c  0800242c  0001242c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002430  08002430  00012430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08002434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000190  080025c4  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  080025c4  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099f5  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c0  00000000  00000000  00029bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  0002b570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002bf40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001687d  00000000  00000000  0002c838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1e1  00000000  00000000  000430b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000845a6  00000000  00000000  0004d296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d183c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c8  00000000  00000000  000d1890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000190 	.word	0x20000190
 8000128:	00000000 	.word	0x00000000
 800012c:	080022ec 	.word	0x080022ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000194 	.word	0x20000194
 8000148:	080022ec 	.word	0x080022ec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <GetROW>:
#include "Component.h"

void GetROW(uint8_t *binary_array){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, binary_array[0]);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	461a      	mov	r2, r3
 800016a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800016e:	4823      	ldr	r0, [pc, #140]	; (80001fc <GetROW+0xa0>)
 8000170:	f000 ffdc 	bl	800112c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, binary_array[1]);
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	3301      	adds	r3, #1
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	461a      	mov	r2, r3
 800017c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000180:	481e      	ldr	r0, [pc, #120]	; (80001fc <GetROW+0xa0>)
 8000182:	f000 ffd3 	bl	800112c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, binary_array[2]);
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	3302      	adds	r3, #2
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	461a      	mov	r2, r3
 800018e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000192:	481a      	ldr	r0, [pc, #104]	; (80001fc <GetROW+0xa0>)
 8000194:	f000 ffca 	bl	800112c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, binary_array[3]);
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	3303      	adds	r3, #3
 800019c:	781b      	ldrb	r3, [r3, #0]
 800019e:	461a      	mov	r2, r3
 80001a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001a4:	4815      	ldr	r0, [pc, #84]	; (80001fc <GetROW+0xa0>)
 80001a6:	f000 ffc1 	bl	800112c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, binary_array[4]);
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	3304      	adds	r3, #4
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	461a      	mov	r2, r3
 80001b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001b6:	4811      	ldr	r0, [pc, #68]	; (80001fc <GetROW+0xa0>)
 80001b8:	f000 ffb8 	bl	800112c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, binary_array[5]);
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	3305      	adds	r3, #5
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	461a      	mov	r2, r3
 80001c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c8:	480c      	ldr	r0, [pc, #48]	; (80001fc <GetROW+0xa0>)
 80001ca:	f000 ffaf 	bl	800112c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, binary_array[6]);
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	3306      	adds	r3, #6
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	461a      	mov	r2, r3
 80001d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001da:	4808      	ldr	r0, [pc, #32]	; (80001fc <GetROW+0xa0>)
 80001dc:	f000 ffa6 	bl	800112c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, binary_array[7]);
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3307      	adds	r3, #7
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	461a      	mov	r2, r3
 80001e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <GetROW+0xa0>)
 80001ee:	f000 ff9d 	bl	800112c <HAL_GPIO_WritePin>
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40010c00 	.word	0x40010c00

08000200 <GetCOL>:

void GetCOL(uint8_t *binary_array_1){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, binary_array_1[0]);
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	461a      	mov	r2, r3
 800020e:	2104      	movs	r1, #4
 8000210:	4822      	ldr	r0, [pc, #136]	; (800029c <GetCOL+0x9c>)
 8000212:	f000 ff8b 	bl	800112c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, binary_array_1[1]);
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	3301      	adds	r3, #1
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	461a      	mov	r2, r3
 800021e:	2108      	movs	r1, #8
 8000220:	481e      	ldr	r0, [pc, #120]	; (800029c <GetCOL+0x9c>)
 8000222:	f000 ff83 	bl	800112c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, binary_array_1[2]);
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	3302      	adds	r3, #2
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	461a      	mov	r2, r3
 800022e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000232:	481a      	ldr	r0, [pc, #104]	; (800029c <GetCOL+0x9c>)
 8000234:	f000 ff7a 	bl	800112c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, binary_array_1[3]);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	3303      	adds	r3, #3
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	461a      	mov	r2, r3
 8000240:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000244:	4815      	ldr	r0, [pc, #84]	; (800029c <GetCOL+0x9c>)
 8000246:	f000 ff71 	bl	800112c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, binary_array_1[4]);
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	3304      	adds	r3, #4
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	461a      	mov	r2, r3
 8000252:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000256:	4811      	ldr	r0, [pc, #68]	; (800029c <GetCOL+0x9c>)
 8000258:	f000 ff68 	bl	800112c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, binary_array_1[5]);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	3305      	adds	r3, #5
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	461a      	mov	r2, r3
 8000264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <GetCOL+0x9c>)
 800026a:	f000 ff5f 	bl	800112c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, binary_array_1[6]);
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	3306      	adds	r3, #6
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	461a      	mov	r2, r3
 8000276:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800027a:	4808      	ldr	r0, [pc, #32]	; (800029c <GetCOL+0x9c>)
 800027c:	f000 ff56 	bl	800112c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, binary_array_1[7]);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3307      	adds	r3, #7
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	461a      	mov	r2, r3
 8000288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <GetCOL+0x9c>)
 800028e:	f000 ff4d 	bl	800112c <HAL_GPIO_WritePin>
}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40010800 	.word	0x40010800

080002a0 <convert_to_binary_array>:

uint8_t* convert_to_binary_array(uint8_t value) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
  uint8_t *binary_array = (uint8_t*)malloc(sizeof(uint8_t) * 8);
 80002aa:	2008      	movs	r0, #8
 80002ac:	f001 ff38 	bl	8002120 <malloc>
 80002b0:	4603      	mov	r3, r0
 80002b2:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < 8; i++) {
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	e00e      	b.n	80002d8 <convert_to_binary_array+0x38>
    binary_array[i] = (value >> i) & 1;
 80002ba:	79fa      	ldrb	r2, [r7, #7]
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	fa42 f303 	asr.w	r3, r2, r3
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	68b9      	ldr	r1, [r7, #8]
 80002c8:	440b      	add	r3, r1
 80002ca:	f002 0201 	and.w	r2, r2, #1
 80002ce:	b2d2      	uxtb	r2, r2
 80002d0:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 8; i++) {
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	3301      	adds	r3, #1
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	2b07      	cmp	r3, #7
 80002dc:	dded      	ble.n	80002ba <convert_to_binary_array+0x1a>
  }
  return binary_array;
 80002de:	68bb      	ldr	r3, [r7, #8]
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <getChar>:
	{0x81, 0x81, 0x9F, 0xCF, 0xE7, 0xF3, 0xF9, 0xF9},
	{0xC3, 0x99, 0x99, 0xC3, 0x99, 0x99, 0x99, 0xC3},
	{0xC3, 0x81, 0x99, 0x99, 0x83, 0x9F, 0x99, 0xC3}
};

uint8_t* getChar(char str) {
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
    switch (str) {
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	3b20      	subs	r3, #32
 80002f6:	2b3a      	cmp	r3, #58	; 0x3a
 80002f8:	f200 80c4 	bhi.w	8000484 <getChar+0x19c>
 80002fc:	a201      	add	r2, pc, #4	; (adr r2, 8000304 <getChar+0x1c>)
 80002fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000302:	bf00      	nop
 8000304:	08000459 	.word	0x08000459
 8000308:	08000485 	.word	0x08000485
 800030c:	08000485 	.word	0x08000485
 8000310:	08000485 	.word	0x08000485
 8000314:	08000485 	.word	0x08000485
 8000318:	08000485 	.word	0x08000485
 800031c:	08000485 	.word	0x08000485
 8000320:	08000485 	.word	0x08000485
 8000324:	08000485 	.word	0x08000485
 8000328:	08000485 	.word	0x08000485
 800032c:	08000485 	.word	0x08000485
 8000330:	08000485 	.word	0x08000485
 8000334:	08000485 	.word	0x08000485
 8000338:	08000485 	.word	0x08000485
 800033c:	08000485 	.word	0x08000485
 8000340:	08000485 	.word	0x08000485
 8000344:	0800045d 	.word	0x0800045d
 8000348:	08000461 	.word	0x08000461
 800034c:	08000465 	.word	0x08000465
 8000350:	08000469 	.word	0x08000469
 8000354:	0800046d 	.word	0x0800046d
 8000358:	08000471 	.word	0x08000471
 800035c:	08000475 	.word	0x08000475
 8000360:	08000479 	.word	0x08000479
 8000364:	0800047d 	.word	0x0800047d
 8000368:	08000481 	.word	0x08000481
 800036c:	08000485 	.word	0x08000485
 8000370:	08000485 	.word	0x08000485
 8000374:	08000485 	.word	0x08000485
 8000378:	08000485 	.word	0x08000485
 800037c:	08000485 	.word	0x08000485
 8000380:	08000485 	.word	0x08000485
 8000384:	08000485 	.word	0x08000485
 8000388:	080003f1 	.word	0x080003f1
 800038c:	080003f5 	.word	0x080003f5
 8000390:	080003f9 	.word	0x080003f9
 8000394:	080003fd 	.word	0x080003fd
 8000398:	08000401 	.word	0x08000401
 800039c:	08000405 	.word	0x08000405
 80003a0:	08000409 	.word	0x08000409
 80003a4:	0800040d 	.word	0x0800040d
 80003a8:	08000411 	.word	0x08000411
 80003ac:	08000415 	.word	0x08000415
 80003b0:	08000419 	.word	0x08000419
 80003b4:	0800041d 	.word	0x0800041d
 80003b8:	08000421 	.word	0x08000421
 80003bc:	08000425 	.word	0x08000425
 80003c0:	08000429 	.word	0x08000429
 80003c4:	0800042d 	.word	0x0800042d
 80003c8:	08000431 	.word	0x08000431
 80003cc:	08000435 	.word	0x08000435
 80003d0:	08000439 	.word	0x08000439
 80003d4:	0800043d 	.word	0x0800043d
 80003d8:	08000441 	.word	0x08000441
 80003dc:	08000445 	.word	0x08000445
 80003e0:	08000449 	.word	0x08000449
 80003e4:	0800044d 	.word	0x0800044d
 80003e8:	08000451 	.word	0x08000451
 80003ec:	08000455 	.word	0x08000455
        case 'A': return ChuA;
 80003f0:	4b27      	ldr	r3, [pc, #156]	; (8000490 <getChar+0x1a8>)
 80003f2:	e048      	b.n	8000486 <getChar+0x19e>
        case 'B': return ChuB;
 80003f4:	4b27      	ldr	r3, [pc, #156]	; (8000494 <getChar+0x1ac>)
 80003f6:	e046      	b.n	8000486 <getChar+0x19e>
        case 'C': return ChuC;
 80003f8:	4b27      	ldr	r3, [pc, #156]	; (8000498 <getChar+0x1b0>)
 80003fa:	e044      	b.n	8000486 <getChar+0x19e>
        case 'D': return ChuD;
 80003fc:	4b27      	ldr	r3, [pc, #156]	; (800049c <getChar+0x1b4>)
 80003fe:	e042      	b.n	8000486 <getChar+0x19e>
        case 'E': return ChuE;
 8000400:	4b27      	ldr	r3, [pc, #156]	; (80004a0 <getChar+0x1b8>)
 8000402:	e040      	b.n	8000486 <getChar+0x19e>
        case 'F': return ChuF;
 8000404:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <getChar+0x1bc>)
 8000406:	e03e      	b.n	8000486 <getChar+0x19e>
        case 'G': return ChuG;
 8000408:	4b27      	ldr	r3, [pc, #156]	; (80004a8 <getChar+0x1c0>)
 800040a:	e03c      	b.n	8000486 <getChar+0x19e>
        case 'H': return ChuH;
 800040c:	4b27      	ldr	r3, [pc, #156]	; (80004ac <getChar+0x1c4>)
 800040e:	e03a      	b.n	8000486 <getChar+0x19e>
        case 'I': return ChuI;
 8000410:	4b27      	ldr	r3, [pc, #156]	; (80004b0 <getChar+0x1c8>)
 8000412:	e038      	b.n	8000486 <getChar+0x19e>
        case 'J': return ChuJ;
 8000414:	4b27      	ldr	r3, [pc, #156]	; (80004b4 <getChar+0x1cc>)
 8000416:	e036      	b.n	8000486 <getChar+0x19e>
        case 'K': return ChuK;
 8000418:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <getChar+0x1d0>)
 800041a:	e034      	b.n	8000486 <getChar+0x19e>
        case 'L': return ChuL;
 800041c:	4b27      	ldr	r3, [pc, #156]	; (80004bc <getChar+0x1d4>)
 800041e:	e032      	b.n	8000486 <getChar+0x19e>
        case 'M': return ChuM;
 8000420:	4b27      	ldr	r3, [pc, #156]	; (80004c0 <getChar+0x1d8>)
 8000422:	e030      	b.n	8000486 <getChar+0x19e>
        case 'N': return ChuN;
 8000424:	4b27      	ldr	r3, [pc, #156]	; (80004c4 <getChar+0x1dc>)
 8000426:	e02e      	b.n	8000486 <getChar+0x19e>
        case 'O': return ChuO;
 8000428:	4b27      	ldr	r3, [pc, #156]	; (80004c8 <getChar+0x1e0>)
 800042a:	e02c      	b.n	8000486 <getChar+0x19e>
        case 'P': return ChuP;
 800042c:	4b27      	ldr	r3, [pc, #156]	; (80004cc <getChar+0x1e4>)
 800042e:	e02a      	b.n	8000486 <getChar+0x19e>
        case 'Q': return ChuQ;
 8000430:	4b27      	ldr	r3, [pc, #156]	; (80004d0 <getChar+0x1e8>)
 8000432:	e028      	b.n	8000486 <getChar+0x19e>
        case 'R': return ChuR;
 8000434:	4b27      	ldr	r3, [pc, #156]	; (80004d4 <getChar+0x1ec>)
 8000436:	e026      	b.n	8000486 <getChar+0x19e>
        case 'S': return ChuS;
 8000438:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <getChar+0x1f0>)
 800043a:	e024      	b.n	8000486 <getChar+0x19e>
        case 'T': return ChuT;
 800043c:	4b27      	ldr	r3, [pc, #156]	; (80004dc <getChar+0x1f4>)
 800043e:	e022      	b.n	8000486 <getChar+0x19e>
        case 'U': return ChuU;
 8000440:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <getChar+0x1f8>)
 8000442:	e020      	b.n	8000486 <getChar+0x19e>
        case 'V': return ChuV;
 8000444:	4b27      	ldr	r3, [pc, #156]	; (80004e4 <getChar+0x1fc>)
 8000446:	e01e      	b.n	8000486 <getChar+0x19e>
        case 'W': return ChuW;
 8000448:	4b27      	ldr	r3, [pc, #156]	; (80004e8 <getChar+0x200>)
 800044a:	e01c      	b.n	8000486 <getChar+0x19e>
        case 'X': return ChuX;
 800044c:	4b27      	ldr	r3, [pc, #156]	; (80004ec <getChar+0x204>)
 800044e:	e01a      	b.n	8000486 <getChar+0x19e>
        case 'Y': return ChuY;
 8000450:	4b27      	ldr	r3, [pc, #156]	; (80004f0 <getChar+0x208>)
 8000452:	e018      	b.n	8000486 <getChar+0x19e>
        case 'Z': return ChuZ;
 8000454:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <getChar+0x20c>)
 8000456:	e016      	b.n	8000486 <getChar+0x19e>
        case ' ': return DauCach;
 8000458:	4b27      	ldr	r3, [pc, #156]	; (80004f8 <getChar+0x210>)
 800045a:	e014      	b.n	8000486 <getChar+0x19e>
        case '0': return DauCach;
 800045c:	4b26      	ldr	r3, [pc, #152]	; (80004f8 <getChar+0x210>)
 800045e:	e012      	b.n	8000486 <getChar+0x19e>
        case '1': return so1;
 8000460:	4b26      	ldr	r3, [pc, #152]	; (80004fc <getChar+0x214>)
 8000462:	e010      	b.n	8000486 <getChar+0x19e>
        case '2': return so2;
 8000464:	4b26      	ldr	r3, [pc, #152]	; (8000500 <getChar+0x218>)
 8000466:	e00e      	b.n	8000486 <getChar+0x19e>
        case '3': return so3;
 8000468:	4b26      	ldr	r3, [pc, #152]	; (8000504 <getChar+0x21c>)
 800046a:	e00c      	b.n	8000486 <getChar+0x19e>
        case '4': return so4;
 800046c:	4b26      	ldr	r3, [pc, #152]	; (8000508 <getChar+0x220>)
 800046e:	e00a      	b.n	8000486 <getChar+0x19e>
        case '5': return so5;
 8000470:	4b26      	ldr	r3, [pc, #152]	; (800050c <getChar+0x224>)
 8000472:	e008      	b.n	8000486 <getChar+0x19e>
        case '6': return so6;
 8000474:	4b26      	ldr	r3, [pc, #152]	; (8000510 <getChar+0x228>)
 8000476:	e006      	b.n	8000486 <getChar+0x19e>
        case '7': return so7;
 8000478:	4b26      	ldr	r3, [pc, #152]	; (8000514 <getChar+0x22c>)
 800047a:	e004      	b.n	8000486 <getChar+0x19e>
        case '8': return so8;
 800047c:	4b26      	ldr	r3, [pc, #152]	; (8000518 <getChar+0x230>)
 800047e:	e002      	b.n	8000486 <getChar+0x19e>
        case '9': return so9;
 8000480:	4b26      	ldr	r3, [pc, #152]	; (800051c <getChar+0x234>)
 8000482:	e000      	b.n	8000486 <getChar+0x19e>
        default: return NULL;
 8000484:	2300      	movs	r3, #0
    }
}
 8000486:	4618      	mov	r0, r3
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	20000000 	.word	0x20000000
 8000494:	20000008 	.word	0x20000008
 8000498:	20000010 	.word	0x20000010
 800049c:	20000018 	.word	0x20000018
 80004a0:	20000020 	.word	0x20000020
 80004a4:	20000028 	.word	0x20000028
 80004a8:	20000030 	.word	0x20000030
 80004ac:	20000038 	.word	0x20000038
 80004b0:	20000040 	.word	0x20000040
 80004b4:	20000048 	.word	0x20000048
 80004b8:	20000050 	.word	0x20000050
 80004bc:	20000058 	.word	0x20000058
 80004c0:	20000060 	.word	0x20000060
 80004c4:	20000068 	.word	0x20000068
 80004c8:	20000070 	.word	0x20000070
 80004cc:	20000078 	.word	0x20000078
 80004d0:	20000080 	.word	0x20000080
 80004d4:	20000088 	.word	0x20000088
 80004d8:	20000090 	.word	0x20000090
 80004dc:	20000098 	.word	0x20000098
 80004e0:	200000a0 	.word	0x200000a0
 80004e4:	200000a8 	.word	0x200000a8
 80004e8:	200000b0 	.word	0x200000b0
 80004ec:	200000b8 	.word	0x200000b8
 80004f0:	200000c0 	.word	0x200000c0
 80004f4:	200000c8 	.word	0x200000c8
 80004f8:	200000d0 	.word	0x200000d0
 80004fc:	200000d8 	.word	0x200000d8
 8000500:	200000e0 	.word	0x200000e0
 8000504:	200000e8 	.word	0x200000e8
 8000508:	200000f0 	.word	0x200000f0
 800050c:	200000f8 	.word	0x200000f8
 8000510:	20000100 	.word	0x20000100
 8000514:	20000108 	.word	0x20000108
 8000518:	20000110 	.word	0x20000110
 800051c:	20000118 	.word	0x20000118

08000520 <Chay1Chu>:
	uint8_t *binary_array_1 = convert_to_binary_array(Chu[x][index]);
	GetCOL(binary_array_1);
	free(binary_array_1);
}

void Chay1Chu(char str) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
    uint8_t* chu = getChar(str);
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff fedb 	bl	80002e8 <getChar>
 8000532:	60f8      	str	r0, [r7, #12]
    for (int h = 7; h >= 0; h--) {
 8000534:	2307      	movs	r3, #7
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	e01d      	b.n	8000576 <Chay1Chu+0x56>
        for (int z = 7; z > 0; z--) {
 800053a:	2307      	movs	r3, #7
 800053c:	613b      	str	r3, [r7, #16]
 800053e:	e00b      	b.n	8000558 <Chay1Chu+0x38>
            Led[z] = Led[z - 1];
 8000540:	693b      	ldr	r3, [r7, #16]
 8000542:	3b01      	subs	r3, #1
 8000544:	4a10      	ldr	r2, [pc, #64]	; (8000588 <Chay1Chu+0x68>)
 8000546:	5cd1      	ldrb	r1, [r2, r3]
 8000548:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <Chay1Chu+0x68>)
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	4413      	add	r3, r2
 800054e:	460a      	mov	r2, r1
 8000550:	701a      	strb	r2, [r3, #0]
        for (int z = 7; z > 0; z--) {
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	3b01      	subs	r3, #1
 8000556:	613b      	str	r3, [r7, #16]
 8000558:	693b      	ldr	r3, [r7, #16]
 800055a:	2b00      	cmp	r3, #0
 800055c:	dcf0      	bgt.n	8000540 <Chay1Chu+0x20>
        }
        Led[0] = chu[h];
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	68fa      	ldr	r2, [r7, #12]
 8000562:	4413      	add	r3, r2
 8000564:	781a      	ldrb	r2, [r3, #0]
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <Chay1Chu+0x68>)
 8000568:	701a      	strb	r2, [r3, #0]
        suLy(Led);
 800056a:	4807      	ldr	r0, [pc, #28]	; (8000588 <Chay1Chu+0x68>)
 800056c:	f000 f80e 	bl	800058c <suLy>
    for (int h = 7; h >= 0; h--) {
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	3b01      	subs	r3, #1
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	2b00      	cmp	r3, #0
 800057a:	dade      	bge.n	800053a <Chay1Chu+0x1a>
    }
}
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	200001c0 	.word	0x200001c0

0800058c <suLy>:

void suLy(uint8_t* chu){
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 5; i++){
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
 8000598:	e02d      	b.n	80005f6 <suLy+0x6a>
	 uint8_t number = 0xFE;
 800059a:	23fe      	movs	r3, #254	; 0xfe
 800059c:	76fb      	strb	r3, [r7, #27]
	 	 for(int j = 0; j <= 8; j++){
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
 80005a2:	e022      	b.n	80005ea <suLy+0x5e>
			 uint8_t *binary_array = convert_to_binary_array(number);
 80005a4:	7efb      	ldrb	r3, [r7, #27]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff fe7a 	bl	80002a0 <convert_to_binary_array>
 80005ac:	6138      	str	r0, [r7, #16]
			 GetROW(binary_array);
 80005ae:	6938      	ldr	r0, [r7, #16]
 80005b0:	f7ff fdd4 	bl	800015c <GetROW>
			 uint8_t *binary_array_1 = convert_to_binary_array(chu[j]);
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe6f 	bl	80002a0 <convert_to_binary_array>
 80005c2:	60f8      	str	r0, [r7, #12]
			 GetCOL(binary_array_1);
 80005c4:	68f8      	ldr	r0, [r7, #12]
 80005c6:	f7ff fe1b 	bl	8000200 <GetCOL>
			 free(binary_array_1);
 80005ca:	68f8      	ldr	r0, [r7, #12]
 80005cc:	f001 fdb0 	bl	8002130 <free>
			 number = (number << 1) | 0x01;
 80005d0:	7efb      	ldrb	r3, [r7, #27]
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	f043 0301 	orr.w	r3, r3, #1
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	76fb      	strb	r3, [r7, #27]
			 HAL_Delay(1);
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 faf8 	bl	8000bd4 <HAL_Delay>
	 	 for(int j = 0; j <= 8; j++){
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	3301      	adds	r3, #1
 80005e8:	617b      	str	r3, [r7, #20]
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	2b08      	cmp	r3, #8
 80005ee:	ddd9      	ble.n	80005a4 <suLy+0x18>
	for(int i = 0; i < 5; i++){
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	3301      	adds	r3, #1
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	ddce      	ble.n	800059a <suLy+0xe>
	 	 }
	}
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <toUpperCase>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void toUpperCase(char *str) {
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
    while (*str) {
 800060e:	e00b      	b.n	8000628 <toUpperCase+0x22>
        *str = toupper((unsigned char)*str); // Chuyển ký tự thành chữ hoa
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fe51 	bl	80022bc <toupper>
 800061a:	4603      	mov	r3, r0
 800061c:	b2da      	uxtb	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	701a      	strb	r2, [r3, #0]
        str++; // Di chuyển đến ký tự tiếp theo
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3301      	adds	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
    while (*str) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d1ef      	bne.n	8000610 <toUpperCase+0xa>
    }
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fa65 	bl	8000b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f871 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f000 f8f7 	bl	800083c <MX_GPIO_Init>
  MX_TIM2_Init();
 800064e:	f000 f8a9 	bl	80007a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000652:	4832      	ldr	r0, [pc, #200]	; (800071c <main+0xe0>)
 8000654:	f001 f9ae 	bl	80019b4 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	2140      	movs	r1, #64	; 0x40
 800065c:	4830      	ldr	r0, [pc, #192]	; (8000720 <main+0xe4>)
 800065e:	f000 fd65 	bl	800112c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000662:	2201      	movs	r2, #1
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	482e      	ldr	r0, [pc, #184]	; (8000720 <main+0xe4>)
 8000668:	f000 fd60 	bl	800112c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	482b      	ldr	r0, [pc, #172]	; (8000720 <main+0xe4>)
 8000674:	f000 fd5a 	bl	800112c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067e:	4828      	ldr	r0, [pc, #160]	; (8000720 <main+0xe4>)
 8000680:	f000 fd54 	bl	800112c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i = 0; i < 8; i++) {
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	e007      	b.n	800069a <main+0x5e>
		Led[i] = 0xFF;
 800068a:	4a26      	ldr	r2, [pc, #152]	; (8000724 <main+0xe8>)
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	4413      	add	r3, r2
 8000690:	22ff      	movs	r2, #255	; 0xff
 8000692:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 8; i++) {
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	3301      	adds	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	2b07      	cmp	r3, #7
 800069e:	ddf4      	ble.n	800068a <main+0x4e>
	  }
	  const char *Chuoi = "BAO";
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <main+0xec>)
 80006a2:	607b      	str	r3, [r7, #4]
	  toUpperCase(Chuoi);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ffae 	bl	8000606 <toUpperCase>
	  int length = strlen(Chuoi);
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff fd4e 	bl	800014c <strlen>
 80006b0:	4603      	mov	r3, r0
 80006b2:	603b      	str	r3, [r7, #0]

	  for (int i = 0; i < length; i++) {
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	e02a      	b.n	8000710 <main+0xd4>
		  Chay1Chu(Chuoi[i]);
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff2c 	bl	8000520 <Chay1Chu>
		  for (int h = 2; h >= 0; h--) {
 80006c8:	2302      	movs	r3, #2
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	e01a      	b.n	8000704 <main+0xc8>
			  for (int z = 7; z > 0; z--) {
 80006ce:	2307      	movs	r3, #7
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	e00b      	b.n	80006ec <main+0xb0>
				  Led[z] = Led[z - 1];
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <main+0xe8>)
 80006da:	5cd1      	ldrb	r1, [r2, r3]
 80006dc:	4a11      	ldr	r2, [pc, #68]	; (8000724 <main+0xe8>)
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	4413      	add	r3, r2
 80006e2:	460a      	mov	r2, r1
 80006e4:	701a      	strb	r2, [r3, #0]
			  for (int z = 7; z > 0; z--) {
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	3b01      	subs	r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	dcf0      	bgt.n	80006d4 <main+0x98>
			  }
			  Led[0] = 0xFF;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <main+0xe8>)
 80006f4:	22ff      	movs	r2, #255	; 0xff
 80006f6:	701a      	strb	r2, [r3, #0]
			  suLy(Led);
 80006f8:	480a      	ldr	r0, [pc, #40]	; (8000724 <main+0xe8>)
 80006fa:	f7ff ff47 	bl	800058c <suLy>
		  for (int h = 2; h >= 0; h--) {
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3b01      	subs	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2b00      	cmp	r3, #0
 8000708:	dae1      	bge.n	80006ce <main+0x92>
	  for (int i = 0; i < length; i++) {
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	3301      	adds	r3, #1
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693a      	ldr	r2, [r7, #16]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	429a      	cmp	r2, r3
 8000716:	dbd0      	blt.n	80006ba <main+0x7e>
  {
 8000718:	e7b4      	b.n	8000684 <main+0x48>
 800071a:	bf00      	nop
 800071c:	200001c8 	.word	0x200001c8
 8000720:	40010800 	.word	0x40010800
 8000724:	200001c0 	.word	0x200001c0
 8000728:	08002304 	.word	0x08002304

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b090      	sub	sp, #64	; 0x40
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0318 	add.w	r3, r7, #24
 8000736:	2228      	movs	r2, #40	; 0x28
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fd00 	bl	8002140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074e:	2302      	movs	r3, #2
 8000750:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000752:	2301      	movs	r3, #1
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000756:	2310      	movs	r3, #16
 8000758:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800075a:	2300      	movs	r3, #0
 800075c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 0318 	add.w	r3, r7, #24
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fcfa 	bl	800115c <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800076e:	f000 f8c5 	bl	80008fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f000 ff66 	bl	800165c <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000796:	f000 f8b1 	bl	80008fc <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3740      	adds	r7, #64	; 0x40
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c0:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_TIM2_Init+0x94>)
 80007c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_TIM2_Init+0x94>)
 80007ca:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80007ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_TIM2_Init+0x94>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_TIM2_Init+0x94>)
 80007d8:	2209      	movs	r2, #9
 80007da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_TIM2_Init+0x94>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_TIM2_Init+0x94>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e8:	4813      	ldr	r0, [pc, #76]	; (8000838 <MX_TIM2_Init+0x94>)
 80007ea:	f001 f893 	bl	8001914 <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007f4:	f000 f882 	bl	80008fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	4619      	mov	r1, r3
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_TIM2_Init+0x94>)
 8000806:	f001 fa11 	bl	8001c2c <HAL_TIM_ConfigClockSource>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000810:	f000 f874 	bl	80008fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_TIM2_Init+0x94>)
 8000822:	f001 fbe9 	bl	8001ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800082c:	f000 f866 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200001c8 	.word	0x200001c8

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_GPIO_Init+0xa0>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a21      	ldr	r2, [pc, #132]	; (80008dc <MX_GPIO_Init+0xa0>)
 8000856:	f043 0304 	orr.w	r3, r3, #4
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_GPIO_Init+0xa0>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0304 	and.w	r3, r3, #4
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_GPIO_Init+0xa0>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a1b      	ldr	r2, [pc, #108]	; (80008dc <MX_GPIO_Init+0xa0>)
 800086e:	f043 0308 	orr.w	r3, r3, #8
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_GPIO_Init+0xa0>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0308 	and.w	r3, r3, #8
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|GPIO_PIN_5
 8000880:	2200      	movs	r2, #0
 8000882:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8000886:	4816      	ldr	r0, [pc, #88]	; (80008e0 <MX_GPIO_Init+0xa4>)
 8000888:	f000 fc50 	bl	800112c <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 800088c:	2200      	movs	r2, #0
 800088e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000892:	4814      	ldr	r0, [pc, #80]	; (80008e4 <MX_GPIO_Init+0xa8>)
 8000894:	f000 fc4a 	bl	800112c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin PA5
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|GPIO_PIN_5
 8000898:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800089c:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2302      	movs	r3, #2
 80008a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	4619      	mov	r1, r3
 80008b0:	480b      	ldr	r0, [pc, #44]	; (80008e0 <MX_GPIO_Init+0xa4>)
 80008b2:	f000 fac1 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin PB7 ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 80008b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ba:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|GPIO_PIN_7|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2302      	movs	r3, #2
 80008c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	4619      	mov	r1, r3
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_GPIO_Init+0xa8>)
 80008d0:	f000 fab2 	bl	8000e38 <HAL_GPIO_Init>

}
 80008d4:	bf00      	nop
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40010800 	.word	0x40010800
 80008e4:	40010c00 	.word	0x40010c00

080008e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	timerRun ();
 80008f0:	f000 f80a 	bl	8000908 <timerRun>
	// YOUR OTHER CODE
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <timerRun>:
void setTimer1(int duration){
	timer1_counter = duration;
	timer1_flag = 0;
}

void timerRun(){
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <timerRun+0x2c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	dd0b      	ble.n	800092c <timerRun+0x24>
		timer1_counter--;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <timerRun+0x2c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	3b01      	subs	r3, #1
 800091a:	4a06      	ldr	r2, [pc, #24]	; (8000934 <timerRun+0x2c>)
 800091c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <timerRun+0x2c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	dc02      	bgt.n	800092c <timerRun+0x24>
			timer1_flag = 1;
 8000926:	4b04      	ldr	r3, [pc, #16]	; (8000938 <timerRun+0x30>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	200001ac 	.word	0x200001ac
 8000938:	200001b0 	.word	0x200001b0

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_MspInit+0x5c>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	4a14      	ldr	r2, [pc, #80]	; (8000998 <HAL_MspInit+0x5c>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6193      	str	r3, [r2, #24]
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_MspInit+0x5c>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <HAL_MspInit+0x5c>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <HAL_MspInit+0x5c>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	61d3      	str	r3, [r2, #28]
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <HAL_MspInit+0x5c>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_MspInit+0x60>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_MspInit+0x60>)
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	40021000 	.word	0x40021000
 800099c:	40010000 	.word	0x40010000

080009a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009b0:	d113      	bne.n	80009da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_TIM_Base_MspInit+0x44>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <HAL_TIM_Base_MspInit+0x44>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_TIM_Base_MspInit+0x44>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	201c      	movs	r0, #28
 80009d0:	f000 f9fb 	bl	8000dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009d4:	201c      	movs	r0, #28
 80009d6:	f000 fa14 	bl	8000e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler+0x4>

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler+0x4>

080009fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr

08000a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr

08000a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr

08000a2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2e:	f000 f8b5 	bl	8000b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <TIM2_IRQHandler+0x10>)
 8000a3e:	f001 f805 	bl	8001a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200001c8 	.word	0x200001c8

08000a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <_sbrk+0x5c>)
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <_sbrk+0x60>)
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d102      	bne.n	8000a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <_sbrk+0x64>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <_sbrk+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d207      	bcs.n	8000a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a7c:	f001 fb26 	bl	80020cc <__errno>
 8000a80:	4603      	mov	r3, r0
 8000a82:	220c      	movs	r2, #12
 8000a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	e009      	b.n	8000aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <_sbrk+0x64>)
 8000a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20002800 	.word	0x20002800
 8000aac:	00000400 	.word	0x00000400
 8000ab0:	200001b4 	.word	0x200001b4
 8000ab4:	20000228 	.word	0x20000228

08000ab8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac4:	f7ff fff8 	bl	8000ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aca:	490c      	ldr	r1, [pc, #48]	; (8000afc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000acc:	4a0c      	ldr	r2, [pc, #48]	; (8000b00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ae0:	4c09      	ldr	r4, [pc, #36]	; (8000b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aee:	f001 faf3 	bl	80020d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af2:	f7ff fda3 	bl	800063c <main>
  bx lr
 8000af6:	4770      	bx	lr
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000b00:	08002434 	.word	0x08002434
  ldr r2, =_sbss
 8000b04:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000b08:	20000224 	.word	0x20000224

08000b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC1_2_IRQHandler>
	...

08000b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_Init+0x28>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <HAL_Init+0x28>)
 8000b1a:	f043 0310 	orr.w	r3, r3, #16
 8000b1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 f947 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b26:	200f      	movs	r0, #15
 8000b28:	f000 f808 	bl	8000b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2c:	f7ff ff06 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40022000 	.word	0x40022000

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_InitTick+0x54>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x58>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f95f 	bl	8000e1e <HAL_SYSTICK_Config>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e00e      	b.n	8000b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d80a      	bhi.n	8000b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f000 f927 	bl	8000dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b7c:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <HAL_InitTick+0x5c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000120 	.word	0x20000120
 8000b94:	20000128 	.word	0x20000128
 8000b98:	20000124 	.word	0x20000124

08000b9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <HAL_IncTick+0x1c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a03      	ldr	r2, [pc, #12]	; (8000bbc <HAL_IncTick+0x20>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr
 8000bb8:	20000128 	.word	0x20000128
 8000bbc:	20000210 	.word	0x20000210

08000bc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <HAL_GetTick+0x10>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	20000210 	.word	0x20000210

08000bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bdc:	f7ff fff0 	bl	8000bc0 <HAL_GetTick>
 8000be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bec:	d005      	beq.n	8000bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_Delay+0x44>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bfa:	bf00      	nop
 8000bfc:	f7ff ffe0 	bl	8000bc0 <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d8f7      	bhi.n	8000bfc <HAL_Delay+0x28>
  {
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000128 	.word	0x20000128

08000c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	60d3      	str	r3, [r2, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db0b      	blt.n	8000caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 021f 	and.w	r2, r3, #31
 8000c98:	4906      	ldr	r1, [pc, #24]	; (8000cb4 <__NVIC_EnableIRQ+0x34>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f7ff ff90 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff2d 	bl	8000c1c <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ddc:	f7ff ff42 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff90 	bl	8000d0c <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5f 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff35 	bl	8000c80 <__NVIC_EnableIRQ>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffa2 	bl	8000d70 <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b08b      	sub	sp, #44	; 0x2c
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4a:	e148      	b.n	80010de <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	69fa      	ldr	r2, [r7, #28]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f040 8137 	bne.w	80010d8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	4aa3      	ldr	r2, [pc, #652]	; (80010fc <HAL_GPIO_Init+0x2c4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d05e      	beq.n	8000f32 <HAL_GPIO_Init+0xfa>
 8000e74:	4aa1      	ldr	r2, [pc, #644]	; (80010fc <HAL_GPIO_Init+0x2c4>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d875      	bhi.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000e7a:	4aa1      	ldr	r2, [pc, #644]	; (8001100 <HAL_GPIO_Init+0x2c8>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d058      	beq.n	8000f32 <HAL_GPIO_Init+0xfa>
 8000e80:	4a9f      	ldr	r2, [pc, #636]	; (8001100 <HAL_GPIO_Init+0x2c8>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d86f      	bhi.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000e86:	4a9f      	ldr	r2, [pc, #636]	; (8001104 <HAL_GPIO_Init+0x2cc>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d052      	beq.n	8000f32 <HAL_GPIO_Init+0xfa>
 8000e8c:	4a9d      	ldr	r2, [pc, #628]	; (8001104 <HAL_GPIO_Init+0x2cc>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d869      	bhi.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000e92:	4a9d      	ldr	r2, [pc, #628]	; (8001108 <HAL_GPIO_Init+0x2d0>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d04c      	beq.n	8000f32 <HAL_GPIO_Init+0xfa>
 8000e98:	4a9b      	ldr	r2, [pc, #620]	; (8001108 <HAL_GPIO_Init+0x2d0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d863      	bhi.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000e9e:	4a9b      	ldr	r2, [pc, #620]	; (800110c <HAL_GPIO_Init+0x2d4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d046      	beq.n	8000f32 <HAL_GPIO_Init+0xfa>
 8000ea4:	4a99      	ldr	r2, [pc, #612]	; (800110c <HAL_GPIO_Init+0x2d4>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d85d      	bhi.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000eaa:	2b12      	cmp	r3, #18
 8000eac:	d82a      	bhi.n	8000f04 <HAL_GPIO_Init+0xcc>
 8000eae:	2b12      	cmp	r3, #18
 8000eb0:	d859      	bhi.n	8000f66 <HAL_GPIO_Init+0x12e>
 8000eb2:	a201      	add	r2, pc, #4	; (adr r2, 8000eb8 <HAL_GPIO_Init+0x80>)
 8000eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb8:	08000f33 	.word	0x08000f33
 8000ebc:	08000f0d 	.word	0x08000f0d
 8000ec0:	08000f1f 	.word	0x08000f1f
 8000ec4:	08000f61 	.word	0x08000f61
 8000ec8:	08000f67 	.word	0x08000f67
 8000ecc:	08000f67 	.word	0x08000f67
 8000ed0:	08000f67 	.word	0x08000f67
 8000ed4:	08000f67 	.word	0x08000f67
 8000ed8:	08000f67 	.word	0x08000f67
 8000edc:	08000f67 	.word	0x08000f67
 8000ee0:	08000f67 	.word	0x08000f67
 8000ee4:	08000f67 	.word	0x08000f67
 8000ee8:	08000f67 	.word	0x08000f67
 8000eec:	08000f67 	.word	0x08000f67
 8000ef0:	08000f67 	.word	0x08000f67
 8000ef4:	08000f67 	.word	0x08000f67
 8000ef8:	08000f67 	.word	0x08000f67
 8000efc:	08000f15 	.word	0x08000f15
 8000f00:	08000f29 	.word	0x08000f29
 8000f04:	4a82      	ldr	r2, [pc, #520]	; (8001110 <HAL_GPIO_Init+0x2d8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d013      	beq.n	8000f32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f0a:	e02c      	b.n	8000f66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	623b      	str	r3, [r7, #32]
          break;
 8000f12:	e029      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	623b      	str	r3, [r7, #32]
          break;
 8000f1c:	e024      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	3308      	adds	r3, #8
 8000f24:	623b      	str	r3, [r7, #32]
          break;
 8000f26:	e01f      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	330c      	adds	r3, #12
 8000f2e:	623b      	str	r3, [r7, #32]
          break;
 8000f30:	e01a      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d102      	bne.n	8000f40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	623b      	str	r3, [r7, #32]
          break;
 8000f3e:	e013      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d105      	bne.n	8000f54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69fa      	ldr	r2, [r7, #28]
 8000f50:	611a      	str	r2, [r3, #16]
          break;
 8000f52:	e009      	b.n	8000f68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f54:	2308      	movs	r3, #8
 8000f56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	615a      	str	r2, [r3, #20]
          break;
 8000f5e:	e003      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
          break;
 8000f64:	e000      	b.n	8000f68 <HAL_GPIO_Init+0x130>
          break;
 8000f66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2bff      	cmp	r3, #255	; 0xff
 8000f6c:	d801      	bhi.n	8000f72 <HAL_GPIO_Init+0x13a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	e001      	b.n	8000f76 <HAL_GPIO_Init+0x13e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3304      	adds	r3, #4
 8000f76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	2bff      	cmp	r3, #255	; 0xff
 8000f7c:	d802      	bhi.n	8000f84 <HAL_GPIO_Init+0x14c>
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	e002      	b.n	8000f8a <HAL_GPIO_Init+0x152>
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	3b08      	subs	r3, #8
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	210f      	movs	r1, #15
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	6a39      	ldr	r1, [r7, #32]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8090 	beq.w	80010d8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb8:	4b56      	ldr	r3, [pc, #344]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a55      	ldr	r2, [pc, #340]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b53      	ldr	r3, [pc, #332]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fd0:	4a51      	ldr	r2, [pc, #324]	; (8001118 <HAL_GPIO_Init+0x2e0>)
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a49      	ldr	r2, [pc, #292]	; (800111c <HAL_GPIO_Init+0x2e4>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d00d      	beq.n	8001018 <HAL_GPIO_Init+0x1e0>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a48      	ldr	r2, [pc, #288]	; (8001120 <HAL_GPIO_Init+0x2e8>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d007      	beq.n	8001014 <HAL_GPIO_Init+0x1dc>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a47      	ldr	r2, [pc, #284]	; (8001124 <HAL_GPIO_Init+0x2ec>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d101      	bne.n	8001010 <HAL_GPIO_Init+0x1d8>
 800100c:	2302      	movs	r3, #2
 800100e:	e004      	b.n	800101a <HAL_GPIO_Init+0x1e2>
 8001010:	2303      	movs	r3, #3
 8001012:	e002      	b.n	800101a <HAL_GPIO_Init+0x1e2>
 8001014:	2301      	movs	r3, #1
 8001016:	e000      	b.n	800101a <HAL_GPIO_Init+0x1e2>
 8001018:	2300      	movs	r3, #0
 800101a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800101c:	f002 0203 	and.w	r2, r2, #3
 8001020:	0092      	lsls	r2, r2, #2
 8001022:	4093      	lsls	r3, r2
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800102a:	493b      	ldr	r1, [pc, #236]	; (8001118 <HAL_GPIO_Init+0x2e0>)
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	3302      	adds	r3, #2
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d006      	beq.n	8001052 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001044:	4b38      	ldr	r3, [pc, #224]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	4937      	ldr	r1, [pc, #220]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	608b      	str	r3, [r1, #8]
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001052:	4b35      	ldr	r3, [pc, #212]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	43db      	mvns	r3, r3
 800105a:	4933      	ldr	r1, [pc, #204]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 800105c:	4013      	ands	r3, r2
 800105e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d006      	beq.n	800107a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800106c:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	492d      	ldr	r1, [pc, #180]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	60cb      	str	r3, [r1, #12]
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 800107c:	68da      	ldr	r2, [r3, #12]
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	43db      	mvns	r3, r3
 8001082:	4929      	ldr	r1, [pc, #164]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 8001084:	4013      	ands	r3, r2
 8001086:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d006      	beq.n	80010a2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001094:	4b24      	ldr	r3, [pc, #144]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	4923      	ldr	r1, [pc, #140]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	604b      	str	r3, [r1, #4]
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	491f      	ldr	r1, [pc, #124]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 80010ac:	4013      	ands	r3, r2
 80010ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d006      	beq.n	80010ca <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4919      	ldr	r1, [pc, #100]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]
 80010c8:	e006      	b.n	80010d8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	4915      	ldr	r1, [pc, #84]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	3301      	adds	r3, #1
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f47f aeaf 	bne.w	8000e4c <HAL_GPIO_Init+0x14>
  }
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	372c      	adds	r7, #44	; 0x2c
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	10320000 	.word	0x10320000
 8001100:	10310000 	.word	0x10310000
 8001104:	10220000 	.word	0x10220000
 8001108:	10210000 	.word	0x10210000
 800110c:	10120000 	.word	0x10120000
 8001110:	10110000 	.word	0x10110000
 8001114:	40021000 	.word	0x40021000
 8001118:	40010000 	.word	0x40010000
 800111c:	40010800 	.word	0x40010800
 8001120:	40010c00 	.word	0x40010c00
 8001124:	40011000 	.word	0x40011000
 8001128:	40010400 	.word	0x40010400

0800112c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
 8001138:	4613      	mov	r3, r2
 800113a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800113c:	787b      	ldrb	r3, [r7, #1]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001142:	887a      	ldrh	r2, [r7, #2]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001148:	e003      	b.n	8001152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	041a      	lsls	r2, r3, #16
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	611a      	str	r2, [r3, #16]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e26c      	b.n	8001648 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 8087 	beq.w	800128a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800117c:	4b92      	ldr	r3, [pc, #584]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	2b04      	cmp	r3, #4
 8001186:	d00c      	beq.n	80011a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001188:	4b8f      	ldr	r3, [pc, #572]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	2b08      	cmp	r3, #8
 8001192:	d112      	bne.n	80011ba <HAL_RCC_OscConfig+0x5e>
 8001194:	4b8c      	ldr	r3, [pc, #560]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a0:	d10b      	bne.n	80011ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a2:	4b89      	ldr	r3, [pc, #548]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d06c      	beq.n	8001288 <HAL_RCC_OscConfig+0x12c>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d168      	bne.n	8001288 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e246      	b.n	8001648 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c2:	d106      	bne.n	80011d2 <HAL_RCC_OscConfig+0x76>
 80011c4:	4b80      	ldr	r3, [pc, #512]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a7f      	ldr	r2, [pc, #508]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	e02e      	b.n	8001230 <HAL_RCC_OscConfig+0xd4>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10c      	bne.n	80011f4 <HAL_RCC_OscConfig+0x98>
 80011da:	4b7b      	ldr	r3, [pc, #492]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a7a      	ldr	r2, [pc, #488]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	4b78      	ldr	r3, [pc, #480]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a77      	ldr	r2, [pc, #476]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e01d      	b.n	8001230 <HAL_RCC_OscConfig+0xd4>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0xbc>
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b6f      	ldr	r3, [pc, #444]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a6e      	ldr	r2, [pc, #440]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e00b      	b.n	8001230 <HAL_RCC_OscConfig+0xd4>
 8001218:	4b6b      	ldr	r3, [pc, #428]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a6a      	ldr	r2, [pc, #424]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800121e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b68      	ldr	r3, [pc, #416]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a67      	ldr	r2, [pc, #412]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800122a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d013      	beq.n	8001260 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fcc2 	bl	8000bc0 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fcbe 	bl	8000bc0 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e1fa      	b.n	8001648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	4b5d      	ldr	r3, [pc, #372]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0xe4>
 800125e:	e014      	b.n	800128a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fcae 	bl	8000bc0 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001268:	f7ff fcaa 	bl	8000bc0 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b64      	cmp	r3, #100	; 0x64
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e1e6      	b.n	8001648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127a:	4b53      	ldr	r3, [pc, #332]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x10c>
 8001286:	e000      	b.n	800128a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d063      	beq.n	800135e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001296:	4b4c      	ldr	r3, [pc, #304]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00b      	beq.n	80012ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012a2:	4b49      	ldr	r3, [pc, #292]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d11c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x18c>
 80012ae:	4b46      	ldr	r3, [pc, #280]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d116      	bne.n	80012e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ba:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <HAL_RCC_OscConfig+0x176>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d001      	beq.n	80012d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e1ba      	b.n	8001648 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d2:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4939      	ldr	r1, [pc, #228]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e6:	e03a      	b.n	800135e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d020      	beq.n	8001332 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f0:	4b36      	ldr	r3, [pc, #216]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f6:	f7ff fc63 	bl	8000bc0 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fe:	f7ff fc5f 	bl	8000bc0 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e19b      	b.n	8001648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f0      	beq.n	80012fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131c:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4927      	ldr	r1, [pc, #156]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800132c:	4313      	orrs	r3, r2
 800132e:	600b      	str	r3, [r1, #0]
 8001330:	e015      	b.n	800135e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fc42 	bl	8000bc0 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001340:	f7ff fc3e 	bl	8000bc0 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e17a      	b.n	8001648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d03a      	beq.n	80013e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d019      	beq.n	80013a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <HAL_RCC_OscConfig+0x274>)
 8001374:	2201      	movs	r2, #1
 8001376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001378:	f7ff fc22 	bl	8000bc0 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001380:	f7ff fc1e 	bl	8000bc0 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e15a      	b.n	8001648 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800139e:	2001      	movs	r0, #1
 80013a0:	f000 fa9a 	bl	80018d8 <RCC_Delay>
 80013a4:	e01c      	b.n	80013e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_RCC_OscConfig+0x274>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ac:	f7ff fc08 	bl	8000bc0 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b2:	e00f      	b.n	80013d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b4:	f7ff fc04 	bl	8000bc0 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d908      	bls.n	80013d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e140      	b.n	8001648 <HAL_RCC_OscConfig+0x4ec>
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000
 80013cc:	42420000 	.word	0x42420000
 80013d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d4:	4b9e      	ldr	r3, [pc, #632]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e9      	bne.n	80013b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 80a6 	beq.w	800153a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f2:	4b97      	ldr	r3, [pc, #604]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10d      	bne.n	800141a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	4b94      	ldr	r3, [pc, #592]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a93      	ldr	r2, [pc, #588]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001408:	61d3      	str	r3, [r2, #28]
 800140a:	4b91      	ldr	r3, [pc, #580]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001416:	2301      	movs	r3, #1
 8001418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141a:	4b8e      	ldr	r3, [pc, #568]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001422:	2b00      	cmp	r3, #0
 8001424:	d118      	bne.n	8001458 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001426:	4b8b      	ldr	r3, [pc, #556]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a8a      	ldr	r2, [pc, #552]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001432:	f7ff fbc5 	bl	8000bc0 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143a:	f7ff fbc1 	bl	8000bc0 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b64      	cmp	r3, #100	; 0x64
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e0fd      	b.n	8001648 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144c:	4b81      	ldr	r3, [pc, #516]	; (8001654 <HAL_RCC_OscConfig+0x4f8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d106      	bne.n	800146e <HAL_RCC_OscConfig+0x312>
 8001460:	4b7b      	ldr	r3, [pc, #492]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4a7a      	ldr	r2, [pc, #488]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6213      	str	r3, [r2, #32]
 800146c:	e02d      	b.n	80014ca <HAL_RCC_OscConfig+0x36e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x334>
 8001476:	4b76      	ldr	r3, [pc, #472]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	4a75      	ldr	r2, [pc, #468]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 800147c:	f023 0301 	bic.w	r3, r3, #1
 8001480:	6213      	str	r3, [r2, #32]
 8001482:	4b73      	ldr	r3, [pc, #460]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4a72      	ldr	r2, [pc, #456]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 8001488:	f023 0304 	bic.w	r3, r3, #4
 800148c:	6213      	str	r3, [r2, #32]
 800148e:	e01c      	b.n	80014ca <HAL_RCC_OscConfig+0x36e>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b05      	cmp	r3, #5
 8001496:	d10c      	bne.n	80014b2 <HAL_RCC_OscConfig+0x356>
 8001498:	4b6d      	ldr	r3, [pc, #436]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4a6c      	ldr	r2, [pc, #432]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	6213      	str	r3, [r2, #32]
 80014a4:	4b6a      	ldr	r3, [pc, #424]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	4a69      	ldr	r2, [pc, #420]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6213      	str	r3, [r2, #32]
 80014b0:	e00b      	b.n	80014ca <HAL_RCC_OscConfig+0x36e>
 80014b2:	4b67      	ldr	r3, [pc, #412]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	4a66      	ldr	r2, [pc, #408]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 80014b8:	f023 0301 	bic.w	r3, r3, #1
 80014bc:	6213      	str	r3, [r2, #32]
 80014be:	4b64      	ldr	r3, [pc, #400]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	4a63      	ldr	r2, [pc, #396]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 80014c4:	f023 0304 	bic.w	r3, r3, #4
 80014c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d015      	beq.n	80014fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fb75 	bl	8000bc0 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d8:	e00a      	b.n	80014f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014da:	f7ff fb71 	bl	8000bc0 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e0ab      	b.n	8001648 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f0:	4b57      	ldr	r3, [pc, #348]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0ee      	beq.n	80014da <HAL_RCC_OscConfig+0x37e>
 80014fc:	e014      	b.n	8001528 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fb5f 	bl	8000bc0 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001504:	e00a      	b.n	800151c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001506:	f7ff fb5b 	bl	8000bc0 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	f241 3288 	movw	r2, #5000	; 0x1388
 8001514:	4293      	cmp	r3, r2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e095      	b.n	8001648 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151c:	4b4c      	ldr	r3, [pc, #304]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1ee      	bne.n	8001506 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d105      	bne.n	800153a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800152e:	4b48      	ldr	r3, [pc, #288]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a47      	ldr	r2, [pc, #284]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 8001534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001538:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 8081 	beq.w	8001646 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001544:	4b42      	ldr	r3, [pc, #264]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	2b08      	cmp	r3, #8
 800154e:	d061      	beq.n	8001614 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d146      	bne.n	80015e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001558:	4b3f      	ldr	r3, [pc, #252]	; (8001658 <HAL_RCC_OscConfig+0x4fc>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fb2f 	bl	8000bc0 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001566:	f7ff fb2b 	bl	8000bc0 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e067      	b.n	8001648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001578:	4b35      	ldr	r3, [pc, #212]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f0      	bne.n	8001566 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158c:	d108      	bne.n	80015a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800158e:	4b30      	ldr	r3, [pc, #192]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	492d      	ldr	r1, [pc, #180]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a0:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a19      	ldr	r1, [r3, #32]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	430b      	orrs	r3, r1
 80015b2:	4927      	ldr	r1, [pc, #156]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b8:	4b27      	ldr	r3, [pc, #156]	; (8001658 <HAL_RCC_OscConfig+0x4fc>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff faff 	bl	8000bc0 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff fafb 	bl	8000bc0 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e037      	b.n	8001648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015d8:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x46a>
 80015e4:	e02f      	b.n	8001646 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <HAL_RCC_OscConfig+0x4fc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fae8 	bl	8000bc0 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fae4 	bl	8000bc0 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e020      	b.n	8001648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x498>
 8001612:	e018      	b.n	8001646 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d101      	bne.n	8001620 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e013      	b.n	8001648 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_RCC_OscConfig+0x4f4>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	429a      	cmp	r2, r3
 8001632:	d106      	bne.n	8001642 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163e:	429a      	cmp	r2, r3
 8001640:	d001      	beq.n	8001646 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000
 8001654:	40007000 	.word	0x40007000
 8001658:	42420060 	.word	0x42420060

0800165c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0d0      	b.n	8001812 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001670:	4b6a      	ldr	r3, [pc, #424]	; (800181c <HAL_RCC_ClockConfig+0x1c0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d910      	bls.n	80016a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b67      	ldr	r3, [pc, #412]	; (800181c <HAL_RCC_ClockConfig+0x1c0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 0207 	bic.w	r2, r3, #7
 8001686:	4965      	ldr	r1, [pc, #404]	; (800181c <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168e:	4b63      	ldr	r3, [pc, #396]	; (800181c <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0b8      	b.n	8001812 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d020      	beq.n	80016ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b8:	4b59      	ldr	r3, [pc, #356]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	4a58      	ldr	r2, [pc, #352]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d0:	4b53      	ldr	r3, [pc, #332]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a52      	ldr	r2, [pc, #328]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016dc:	4b50      	ldr	r3, [pc, #320]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	494d      	ldr	r1, [pc, #308]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d040      	beq.n	800177c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d107      	bne.n	8001712 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	4b47      	ldr	r3, [pc, #284]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d115      	bne.n	800173a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e07f      	b.n	8001812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171a:	4b41      	ldr	r3, [pc, #260]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d109      	bne.n	800173a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e073      	b.n	8001812 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172a:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e06b      	b.n	8001812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173a:	4b39      	ldr	r3, [pc, #228]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f023 0203 	bic.w	r2, r3, #3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	4936      	ldr	r1, [pc, #216]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800174c:	f7ff fa38 	bl	8000bc0 <HAL_GetTick>
 8001750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001752:	e00a      	b.n	800176a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001754:	f7ff fa34 	bl	8000bc0 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e053      	b.n	8001812 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 020c 	and.w	r2, r3, #12
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	429a      	cmp	r2, r3
 800177a:	d1eb      	bne.n	8001754 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <HAL_RCC_ClockConfig+0x1c0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d210      	bcs.n	80017ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <HAL_RCC_ClockConfig+0x1c0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f023 0207 	bic.w	r2, r3, #7
 8001792:	4922      	ldr	r1, [pc, #136]	; (800181c <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d001      	beq.n	80017ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e032      	b.n	8001812 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	4916      	ldr	r1, [pc, #88]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d009      	beq.n	80017ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	490e      	ldr	r1, [pc, #56]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ea:	f000 f821 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 80017ee:	4602      	mov	r2, r0
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	490a      	ldr	r1, [pc, #40]	; (8001824 <HAL_RCC_ClockConfig+0x1c8>)
 80017fc:	5ccb      	ldrb	r3, [r1, r3]
 80017fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <HAL_RCC_ClockConfig+0x1cc>)
 8001804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_RCC_ClockConfig+0x1d0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff f996 	bl	8000b3c <HAL_InitTick>

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40022000 	.word	0x40022000
 8001820:	40021000 	.word	0x40021000
 8001824:	08002308 	.word	0x08002308
 8001828:	20000120 	.word	0x20000120
 800182c:	20000124 	.word	0x20000124

08001830 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001830:	b480      	push	{r7}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800184a:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b04      	cmp	r3, #4
 8001858:	d002      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x30>
 800185a:	2b08      	cmp	r3, #8
 800185c:	d003      	beq.n	8001866 <HAL_RCC_GetSysClockFreq+0x36>
 800185e:	e027      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001862:	613b      	str	r3, [r7, #16]
      break;
 8001864:	e027      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	0c9b      	lsrs	r3, r3, #18
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	4a17      	ldr	r2, [pc, #92]	; (80018cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001870:	5cd3      	ldrb	r3, [r2, r3]
 8001872:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d010      	beq.n	80018a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	0c5b      	lsrs	r3, r3, #17
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001892:	fb02 f203 	mul.w	r2, r2, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	fbb2 f3f3 	udiv	r3, r2, r3
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	e004      	b.n	80018aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018a4:	fb02 f303 	mul.w	r3, r2, r3
 80018a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	613b      	str	r3, [r7, #16]
      break;
 80018ae:	e002      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80018b2:	613b      	str	r3, [r7, #16]
      break;
 80018b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018b6:	693b      	ldr	r3, [r7, #16]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	371c      	adds	r7, #28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	007a1200 	.word	0x007a1200
 80018cc:	08002318 	.word	0x08002318
 80018d0:	08002328 	.word	0x08002328
 80018d4:	003d0900 	.word	0x003d0900

080018d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <RCC_Delay+0x34>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <RCC_Delay+0x38>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	0a5b      	lsrs	r3, r3, #9
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	fb02 f303 	mul.w	r3, r2, r3
 80018f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018f4:	bf00      	nop
  }
  while (Delay --);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1e5a      	subs	r2, r3, #1
 80018fa:	60fa      	str	r2, [r7, #12]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f9      	bne.n	80018f4 <RCC_Delay+0x1c>
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	20000120 	.word	0x20000120
 8001910:	10624dd3 	.word	0x10624dd3

08001914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e041      	b.n	80019aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d106      	bne.n	8001940 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff f830 	bl	80009a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2202      	movs	r2, #2
 8001944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3304      	adds	r3, #4
 8001950:	4619      	mov	r1, r3
 8001952:	4610      	mov	r0, r2
 8001954:	f000 fa56 	bl	8001e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d001      	beq.n	80019cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e035      	b.n	8001a38 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a16      	ldr	r2, [pc, #88]	; (8001a44 <HAL_TIM_Base_Start_IT+0x90>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d009      	beq.n	8001a02 <HAL_TIM_Base_Start_IT+0x4e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f6:	d004      	beq.n	8001a02 <HAL_TIM_Base_Start_IT+0x4e>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <HAL_TIM_Base_Start_IT+0x94>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d111      	bne.n	8001a26 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b06      	cmp	r3, #6
 8001a12:	d010      	beq.n	8001a36 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a24:	e007      	b.n	8001a36 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 0201 	orr.w	r2, r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40012c00 	.word	0x40012c00
 8001a48:	40000400 	.word	0x40000400

08001a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d020      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d01b      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f06f 0202 	mvn.w	r2, #2
 8001a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f998 	bl	8001dcc <HAL_TIM_IC_CaptureCallback>
 8001a9c:	e005      	b.n	8001aaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f98b 	bl	8001dba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f99a 	bl	8001dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d020      	beq.n	8001afc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d01b      	beq.n	8001afc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f06f 0204 	mvn.w	r2, #4
 8001acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f972 	bl	8001dcc <HAL_TIM_IC_CaptureCallback>
 8001ae8:	e005      	b.n	8001af6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f965 	bl	8001dba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f974 	bl	8001dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d020      	beq.n	8001b48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01b      	beq.n	8001b48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f06f 0208 	mvn.w	r2, #8
 8001b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f94c 	bl	8001dcc <HAL_TIM_IC_CaptureCallback>
 8001b34:	e005      	b.n	8001b42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f93f 	bl	8001dba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f94e 	bl	8001dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d020      	beq.n	8001b94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01b      	beq.n	8001b94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f06f 0210 	mvn.w	r2, #16
 8001b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2208      	movs	r2, #8
 8001b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f926 	bl	8001dcc <HAL_TIM_IC_CaptureCallback>
 8001b80:	e005      	b.n	8001b8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f919 	bl	8001dba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f928 	bl	8001dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00c      	beq.n	8001bb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f06f 0201 	mvn.w	r2, #1
 8001bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7fe fe98 	bl	80008e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00c      	beq.n	8001bdc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fa6f 	bl	80020ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00c      	beq.n	8001c00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f8f8 	bl	8001df0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00c      	beq.n	8001c24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f003 0320 	and.w	r3, r3, #32
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d007      	beq.n	8001c24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0220 	mvn.w	r2, #32
 8001c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 fa42 	bl	80020a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_TIM_ConfigClockSource+0x1c>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e0b4      	b.n	8001db2 <HAL_TIM_ConfigClockSource+0x186>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c80:	d03e      	beq.n	8001d00 <HAL_TIM_ConfigClockSource+0xd4>
 8001c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c86:	f200 8087 	bhi.w	8001d98 <HAL_TIM_ConfigClockSource+0x16c>
 8001c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c8e:	f000 8086 	beq.w	8001d9e <HAL_TIM_ConfigClockSource+0x172>
 8001c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c96:	d87f      	bhi.n	8001d98 <HAL_TIM_ConfigClockSource+0x16c>
 8001c98:	2b70      	cmp	r3, #112	; 0x70
 8001c9a:	d01a      	beq.n	8001cd2 <HAL_TIM_ConfigClockSource+0xa6>
 8001c9c:	2b70      	cmp	r3, #112	; 0x70
 8001c9e:	d87b      	bhi.n	8001d98 <HAL_TIM_ConfigClockSource+0x16c>
 8001ca0:	2b60      	cmp	r3, #96	; 0x60
 8001ca2:	d050      	beq.n	8001d46 <HAL_TIM_ConfigClockSource+0x11a>
 8001ca4:	2b60      	cmp	r3, #96	; 0x60
 8001ca6:	d877      	bhi.n	8001d98 <HAL_TIM_ConfigClockSource+0x16c>
 8001ca8:	2b50      	cmp	r3, #80	; 0x50
 8001caa:	d03c      	beq.n	8001d26 <HAL_TIM_ConfigClockSource+0xfa>
 8001cac:	2b50      	cmp	r3, #80	; 0x50
 8001cae:	d873      	bhi.n	8001d98 <HAL_TIM_ConfigClockSource+0x16c>
 8001cb0:	2b40      	cmp	r3, #64	; 0x40
 8001cb2:	d058      	beq.n	8001d66 <HAL_TIM_ConfigClockSource+0x13a>
 8001cb4:	2b40      	cmp	r3, #64	; 0x40
 8001cb6:	d86f      	bhi.n	8001d98 <HAL_TIM_ConfigClockSource+0x16c>
 8001cb8:	2b30      	cmp	r3, #48	; 0x30
 8001cba:	d064      	beq.n	8001d86 <HAL_TIM_ConfigClockSource+0x15a>
 8001cbc:	2b30      	cmp	r3, #48	; 0x30
 8001cbe:	d86b      	bhi.n	8001d98 <HAL_TIM_ConfigClockSource+0x16c>
 8001cc0:	2b20      	cmp	r3, #32
 8001cc2:	d060      	beq.n	8001d86 <HAL_TIM_ConfigClockSource+0x15a>
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	d867      	bhi.n	8001d98 <HAL_TIM_ConfigClockSource+0x16c>
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d05c      	beq.n	8001d86 <HAL_TIM_ConfigClockSource+0x15a>
 8001ccc:	2b10      	cmp	r3, #16
 8001cce:	d05a      	beq.n	8001d86 <HAL_TIM_ConfigClockSource+0x15a>
 8001cd0:	e062      	b.n	8001d98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	6899      	ldr	r1, [r3, #8]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f000 f96a 	bl	8001fba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001cf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	609a      	str	r2, [r3, #8]
      break;
 8001cfe:	e04f      	b.n	8001da0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6899      	ldr	r1, [r3, #8]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f000 f953 	bl	8001fba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d22:	609a      	str	r2, [r3, #8]
      break;
 8001d24:	e03c      	b.n	8001da0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	6859      	ldr	r1, [r3, #4]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	461a      	mov	r2, r3
 8001d34:	f000 f8ca 	bl	8001ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2150      	movs	r1, #80	; 0x50
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f921 	bl	8001f86 <TIM_ITRx_SetConfig>
      break;
 8001d44:	e02c      	b.n	8001da0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	6859      	ldr	r1, [r3, #4]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	461a      	mov	r2, r3
 8001d54:	f000 f8e8 	bl	8001f28 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2160      	movs	r1, #96	; 0x60
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 f911 	bl	8001f86 <TIM_ITRx_SetConfig>
      break;
 8001d64:	e01c      	b.n	8001da0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	6859      	ldr	r1, [r3, #4]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	461a      	mov	r2, r3
 8001d74:	f000 f8aa 	bl	8001ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2140      	movs	r1, #64	; 0x40
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f901 	bl	8001f86 <TIM_ITRx_SetConfig>
      break;
 8001d84:	e00c      	b.n	8001da0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4610      	mov	r0, r2
 8001d92:	f000 f8f8 	bl	8001f86 <TIM_ITRx_SetConfig>
      break;
 8001d96:	e003      	b.n	8001da0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d9c:	e000      	b.n	8001da0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001d9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
	...

08001e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a2b      	ldr	r2, [pc, #172]	; (8001ec4 <TIM_Base_SetConfig+0xc0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d007      	beq.n	8001e2c <TIM_Base_SetConfig+0x28>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e22:	d003      	beq.n	8001e2c <TIM_Base_SetConfig+0x28>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a28      	ldr	r2, [pc, #160]	; (8001ec8 <TIM_Base_SetConfig+0xc4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d108      	bne.n	8001e3e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a20      	ldr	r2, [pc, #128]	; (8001ec4 <TIM_Base_SetConfig+0xc0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d007      	beq.n	8001e56 <TIM_Base_SetConfig+0x52>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4c:	d003      	beq.n	8001e56 <TIM_Base_SetConfig+0x52>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a1d      	ldr	r2, [pc, #116]	; (8001ec8 <TIM_Base_SetConfig+0xc4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d108      	bne.n	8001e68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a0d      	ldr	r2, [pc, #52]	; (8001ec4 <TIM_Base_SetConfig+0xc0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d103      	bne.n	8001e9c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f023 0201 	bic.w	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	611a      	str	r2, [r3, #16]
  }
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	40012c00 	.word	0x40012c00
 8001ec8:	40000400 	.word	0x40000400

08001ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	f023 0201 	bic.w	r2, r3, #1
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f023 030a 	bic.w	r3, r3, #10
 8001f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	621a      	str	r2, [r3, #32]
}
 8001f1e:	bf00      	nop
 8001f20:	371c      	adds	r7, #28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b087      	sub	sp, #28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	f023 0210 	bic.w	r2, r3, #16
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	031b      	lsls	r3, r3, #12
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f64:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	621a      	str	r2, [r3, #32]
}
 8001f7c:	bf00      	nop
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f043 0307 	orr.w	r3, r3, #7
 8001fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	609a      	str	r2, [r3, #8]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr

08001fba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b087      	sub	sp, #28
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fd4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	021a      	lsls	r2, r3, #8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	609a      	str	r2, [r3, #8]
}
 8001fee:	bf00      	nop
 8001ff0:	371c      	adds	r7, #28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800200c:	2302      	movs	r3, #2
 800200e:	e041      	b.n	8002094 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d009      	beq.n	8002068 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205c:	d004      	beq.n	8002068 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d10c      	bne.n	8002082 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800206e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	4313      	orrs	r3, r2
 8002078:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40012c00 	.word	0x40012c00
 80020a4:	40000400 	.word	0x40000400

080020a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <__errno>:
 80020cc:	4b01      	ldr	r3, [pc, #4]	; (80020d4 <__errno+0x8>)
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	2000012c 	.word	0x2000012c

080020d8 <__libc_init_array>:
 80020d8:	b570      	push	{r4, r5, r6, lr}
 80020da:	2600      	movs	r6, #0
 80020dc:	4d0c      	ldr	r5, [pc, #48]	; (8002110 <__libc_init_array+0x38>)
 80020de:	4c0d      	ldr	r4, [pc, #52]	; (8002114 <__libc_init_array+0x3c>)
 80020e0:	1b64      	subs	r4, r4, r5
 80020e2:	10a4      	asrs	r4, r4, #2
 80020e4:	42a6      	cmp	r6, r4
 80020e6:	d109      	bne.n	80020fc <__libc_init_array+0x24>
 80020e8:	f000 f900 	bl	80022ec <_init>
 80020ec:	2600      	movs	r6, #0
 80020ee:	4d0a      	ldr	r5, [pc, #40]	; (8002118 <__libc_init_array+0x40>)
 80020f0:	4c0a      	ldr	r4, [pc, #40]	; (800211c <__libc_init_array+0x44>)
 80020f2:	1b64      	subs	r4, r4, r5
 80020f4:	10a4      	asrs	r4, r4, #2
 80020f6:	42a6      	cmp	r6, r4
 80020f8:	d105      	bne.n	8002106 <__libc_init_array+0x2e>
 80020fa:	bd70      	pop	{r4, r5, r6, pc}
 80020fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002100:	4798      	blx	r3
 8002102:	3601      	adds	r6, #1
 8002104:	e7ee      	b.n	80020e4 <__libc_init_array+0xc>
 8002106:	f855 3b04 	ldr.w	r3, [r5], #4
 800210a:	4798      	blx	r3
 800210c:	3601      	adds	r6, #1
 800210e:	e7f2      	b.n	80020f6 <__libc_init_array+0x1e>
 8002110:	0800242c 	.word	0x0800242c
 8002114:	0800242c 	.word	0x0800242c
 8002118:	0800242c 	.word	0x0800242c
 800211c:	08002430 	.word	0x08002430

08002120 <malloc>:
 8002120:	4b02      	ldr	r3, [pc, #8]	; (800212c <malloc+0xc>)
 8002122:	4601      	mov	r1, r0
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	f000 b85f 	b.w	80021e8 <_malloc_r>
 800212a:	bf00      	nop
 800212c:	2000012c 	.word	0x2000012c

08002130 <free>:
 8002130:	4b02      	ldr	r3, [pc, #8]	; (800213c <free+0xc>)
 8002132:	4601      	mov	r1, r0
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	f000 b80b 	b.w	8002150 <_free_r>
 800213a:	bf00      	nop
 800213c:	2000012c 	.word	0x2000012c

08002140 <memset>:
 8002140:	4603      	mov	r3, r0
 8002142:	4402      	add	r2, r0
 8002144:	4293      	cmp	r3, r2
 8002146:	d100      	bne.n	800214a <memset+0xa>
 8002148:	4770      	bx	lr
 800214a:	f803 1b01 	strb.w	r1, [r3], #1
 800214e:	e7f9      	b.n	8002144 <memset+0x4>

08002150 <_free_r>:
 8002150:	b538      	push	{r3, r4, r5, lr}
 8002152:	4605      	mov	r5, r0
 8002154:	2900      	cmp	r1, #0
 8002156:	d043      	beq.n	80021e0 <_free_r+0x90>
 8002158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800215c:	1f0c      	subs	r4, r1, #4
 800215e:	2b00      	cmp	r3, #0
 8002160:	bfb8      	it	lt
 8002162:	18e4      	addlt	r4, r4, r3
 8002164:	f000 f8b4 	bl	80022d0 <__malloc_lock>
 8002168:	4a1e      	ldr	r2, [pc, #120]	; (80021e4 <_free_r+0x94>)
 800216a:	6813      	ldr	r3, [r2, #0]
 800216c:	4610      	mov	r0, r2
 800216e:	b933      	cbnz	r3, 800217e <_free_r+0x2e>
 8002170:	6063      	str	r3, [r4, #4]
 8002172:	6014      	str	r4, [r2, #0]
 8002174:	4628      	mov	r0, r5
 8002176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800217a:	f000 b8af 	b.w	80022dc <__malloc_unlock>
 800217e:	42a3      	cmp	r3, r4
 8002180:	d90a      	bls.n	8002198 <_free_r+0x48>
 8002182:	6821      	ldr	r1, [r4, #0]
 8002184:	1862      	adds	r2, r4, r1
 8002186:	4293      	cmp	r3, r2
 8002188:	bf01      	itttt	eq
 800218a:	681a      	ldreq	r2, [r3, #0]
 800218c:	685b      	ldreq	r3, [r3, #4]
 800218e:	1852      	addeq	r2, r2, r1
 8002190:	6022      	streq	r2, [r4, #0]
 8002192:	6063      	str	r3, [r4, #4]
 8002194:	6004      	str	r4, [r0, #0]
 8002196:	e7ed      	b.n	8002174 <_free_r+0x24>
 8002198:	461a      	mov	r2, r3
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	b10b      	cbz	r3, 80021a2 <_free_r+0x52>
 800219e:	42a3      	cmp	r3, r4
 80021a0:	d9fa      	bls.n	8002198 <_free_r+0x48>
 80021a2:	6811      	ldr	r1, [r2, #0]
 80021a4:	1850      	adds	r0, r2, r1
 80021a6:	42a0      	cmp	r0, r4
 80021a8:	d10b      	bne.n	80021c2 <_free_r+0x72>
 80021aa:	6820      	ldr	r0, [r4, #0]
 80021ac:	4401      	add	r1, r0
 80021ae:	1850      	adds	r0, r2, r1
 80021b0:	4283      	cmp	r3, r0
 80021b2:	6011      	str	r1, [r2, #0]
 80021b4:	d1de      	bne.n	8002174 <_free_r+0x24>
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4401      	add	r1, r0
 80021bc:	6011      	str	r1, [r2, #0]
 80021be:	6053      	str	r3, [r2, #4]
 80021c0:	e7d8      	b.n	8002174 <_free_r+0x24>
 80021c2:	d902      	bls.n	80021ca <_free_r+0x7a>
 80021c4:	230c      	movs	r3, #12
 80021c6:	602b      	str	r3, [r5, #0]
 80021c8:	e7d4      	b.n	8002174 <_free_r+0x24>
 80021ca:	6820      	ldr	r0, [r4, #0]
 80021cc:	1821      	adds	r1, r4, r0
 80021ce:	428b      	cmp	r3, r1
 80021d0:	bf01      	itttt	eq
 80021d2:	6819      	ldreq	r1, [r3, #0]
 80021d4:	685b      	ldreq	r3, [r3, #4]
 80021d6:	1809      	addeq	r1, r1, r0
 80021d8:	6021      	streq	r1, [r4, #0]
 80021da:	6063      	str	r3, [r4, #4]
 80021dc:	6054      	str	r4, [r2, #4]
 80021de:	e7c9      	b.n	8002174 <_free_r+0x24>
 80021e0:	bd38      	pop	{r3, r4, r5, pc}
 80021e2:	bf00      	nop
 80021e4:	200001b8 	.word	0x200001b8

080021e8 <_malloc_r>:
 80021e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ea:	1ccd      	adds	r5, r1, #3
 80021ec:	f025 0503 	bic.w	r5, r5, #3
 80021f0:	3508      	adds	r5, #8
 80021f2:	2d0c      	cmp	r5, #12
 80021f4:	bf38      	it	cc
 80021f6:	250c      	movcc	r5, #12
 80021f8:	2d00      	cmp	r5, #0
 80021fa:	4606      	mov	r6, r0
 80021fc:	db01      	blt.n	8002202 <_malloc_r+0x1a>
 80021fe:	42a9      	cmp	r1, r5
 8002200:	d903      	bls.n	800220a <_malloc_r+0x22>
 8002202:	230c      	movs	r3, #12
 8002204:	6033      	str	r3, [r6, #0]
 8002206:	2000      	movs	r0, #0
 8002208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800220a:	f000 f861 	bl	80022d0 <__malloc_lock>
 800220e:	4921      	ldr	r1, [pc, #132]	; (8002294 <_malloc_r+0xac>)
 8002210:	680a      	ldr	r2, [r1, #0]
 8002212:	4614      	mov	r4, r2
 8002214:	b99c      	cbnz	r4, 800223e <_malloc_r+0x56>
 8002216:	4f20      	ldr	r7, [pc, #128]	; (8002298 <_malloc_r+0xb0>)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	b923      	cbnz	r3, 8002226 <_malloc_r+0x3e>
 800221c:	4621      	mov	r1, r4
 800221e:	4630      	mov	r0, r6
 8002220:	f000 f83c 	bl	800229c <_sbrk_r>
 8002224:	6038      	str	r0, [r7, #0]
 8002226:	4629      	mov	r1, r5
 8002228:	4630      	mov	r0, r6
 800222a:	f000 f837 	bl	800229c <_sbrk_r>
 800222e:	1c43      	adds	r3, r0, #1
 8002230:	d123      	bne.n	800227a <_malloc_r+0x92>
 8002232:	230c      	movs	r3, #12
 8002234:	4630      	mov	r0, r6
 8002236:	6033      	str	r3, [r6, #0]
 8002238:	f000 f850 	bl	80022dc <__malloc_unlock>
 800223c:	e7e3      	b.n	8002206 <_malloc_r+0x1e>
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	1b5b      	subs	r3, r3, r5
 8002242:	d417      	bmi.n	8002274 <_malloc_r+0x8c>
 8002244:	2b0b      	cmp	r3, #11
 8002246:	d903      	bls.n	8002250 <_malloc_r+0x68>
 8002248:	6023      	str	r3, [r4, #0]
 800224a:	441c      	add	r4, r3
 800224c:	6025      	str	r5, [r4, #0]
 800224e:	e004      	b.n	800225a <_malloc_r+0x72>
 8002250:	6863      	ldr	r3, [r4, #4]
 8002252:	42a2      	cmp	r2, r4
 8002254:	bf0c      	ite	eq
 8002256:	600b      	streq	r3, [r1, #0]
 8002258:	6053      	strne	r3, [r2, #4]
 800225a:	4630      	mov	r0, r6
 800225c:	f000 f83e 	bl	80022dc <__malloc_unlock>
 8002260:	f104 000b 	add.w	r0, r4, #11
 8002264:	1d23      	adds	r3, r4, #4
 8002266:	f020 0007 	bic.w	r0, r0, #7
 800226a:	1ac2      	subs	r2, r0, r3
 800226c:	d0cc      	beq.n	8002208 <_malloc_r+0x20>
 800226e:	1a1b      	subs	r3, r3, r0
 8002270:	50a3      	str	r3, [r4, r2]
 8002272:	e7c9      	b.n	8002208 <_malloc_r+0x20>
 8002274:	4622      	mov	r2, r4
 8002276:	6864      	ldr	r4, [r4, #4]
 8002278:	e7cc      	b.n	8002214 <_malloc_r+0x2c>
 800227a:	1cc4      	adds	r4, r0, #3
 800227c:	f024 0403 	bic.w	r4, r4, #3
 8002280:	42a0      	cmp	r0, r4
 8002282:	d0e3      	beq.n	800224c <_malloc_r+0x64>
 8002284:	1a21      	subs	r1, r4, r0
 8002286:	4630      	mov	r0, r6
 8002288:	f000 f808 	bl	800229c <_sbrk_r>
 800228c:	3001      	adds	r0, #1
 800228e:	d1dd      	bne.n	800224c <_malloc_r+0x64>
 8002290:	e7cf      	b.n	8002232 <_malloc_r+0x4a>
 8002292:	bf00      	nop
 8002294:	200001b8 	.word	0x200001b8
 8002298:	200001bc 	.word	0x200001bc

0800229c <_sbrk_r>:
 800229c:	b538      	push	{r3, r4, r5, lr}
 800229e:	2300      	movs	r3, #0
 80022a0:	4d05      	ldr	r5, [pc, #20]	; (80022b8 <_sbrk_r+0x1c>)
 80022a2:	4604      	mov	r4, r0
 80022a4:	4608      	mov	r0, r1
 80022a6:	602b      	str	r3, [r5, #0]
 80022a8:	f7fe fbd0 	bl	8000a4c <_sbrk>
 80022ac:	1c43      	adds	r3, r0, #1
 80022ae:	d102      	bne.n	80022b6 <_sbrk_r+0x1a>
 80022b0:	682b      	ldr	r3, [r5, #0]
 80022b2:	b103      	cbz	r3, 80022b6 <_sbrk_r+0x1a>
 80022b4:	6023      	str	r3, [r4, #0]
 80022b6:	bd38      	pop	{r3, r4, r5, pc}
 80022b8:	20000214 	.word	0x20000214

080022bc <toupper>:
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <toupper+0x10>)
 80022be:	5cc3      	ldrb	r3, [r0, r3]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	bf08      	it	eq
 80022c8:	3820      	subeq	r0, #32
 80022ca:	4770      	bx	lr
 80022cc:	0800232b 	.word	0x0800232b

080022d0 <__malloc_lock>:
 80022d0:	4801      	ldr	r0, [pc, #4]	; (80022d8 <__malloc_lock+0x8>)
 80022d2:	f000 b809 	b.w	80022e8 <__retarget_lock_acquire_recursive>
 80022d6:	bf00      	nop
 80022d8:	2000021c 	.word	0x2000021c

080022dc <__malloc_unlock>:
 80022dc:	4801      	ldr	r0, [pc, #4]	; (80022e4 <__malloc_unlock+0x8>)
 80022de:	f000 b804 	b.w	80022ea <__retarget_lock_release_recursive>
 80022e2:	bf00      	nop
 80022e4:	2000021c 	.word	0x2000021c

080022e8 <__retarget_lock_acquire_recursive>:
 80022e8:	4770      	bx	lr

080022ea <__retarget_lock_release_recursive>:
 80022ea:	4770      	bx	lr

080022ec <_init>:
 80022ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ee:	bf00      	nop
 80022f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022f2:	bc08      	pop	{r3}
 80022f4:	469e      	mov	lr, r3
 80022f6:	4770      	bx	lr

080022f8 <_fini>:
 80022f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fa:	bf00      	nop
 80022fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fe:	bc08      	pop	{r3}
 8002300:	469e      	mov	lr, r3
 8002302:	4770      	bx	lr
